#!/usr/bin/env ruby

require 'rubygems'

begin
  require 'taketo'
  require 'taketo/constructs_factory'
  require 'taketo/commands'
  require 'taketo/destination_resolver'
  require 'optparse'
rescue LoadError => e #development
  raise if $loaded
  $:.unshift File.expand_path('../../lib', __FILE__)
  require 'bundler'
  Bundler.setup(:default)
  $loaded = true
  retry
end

Signal.trap("SIGINT") do
  puts "Terminating"
  exit 1
end

include Taketo

def parse_options
  options = { :config => File.join(ENV['HOME'], ".taketo.rc.rb") }

  OptionParser.new do |opts|
    opts.banner = <<-DESC
A tiny helper utility to make access to servers 
eaiser for different projects and environments.
  DESC

    opts.on("-f CONFIG", "--config") do |c|
      options[:config] = c
    end

    opts.on("--dry-run") do |v|
      options[:dry_run] = v
    end

    opts.on("--debug") do |d|
      options[:debug] = d
    end

    opts.on("-c COMMAND", "--command") do |c|
      raise OptionParser::MissingArgument if String(c).strip.empty?
      options[:command] = c
    end
  end.parse!

  options
end

def parse_config(config)
  DSL.new.configure(config).tap do |config|
    ConfigValidator.new(config).validate!
  end
end

def remote_command(server, options)
  command_name = options[:command] or return default_command(options)
  server.command_by_name(command_name.to_sym) { default_command(options) }
end

def default_command(options)
  cmd = Constructs::Command.new(:default)
  cmd.command = options.fetch(:command) { "bash" }
  cmd
end
 
begin
  options = parse_options
  config  = parse_config(options[:config])

  destination_path = ARGV.shift.to_s
  server = DestinationResolver.new(config, destination_path).resolve

  server_command = remote_command(server, options)
  command_to_execute = Commands::SSHCommand.new(server).render(server_command)

  if options[:dry_run]
    puts command_to_execute
  else
    system command_to_execute
  end
rescue SystemExit
  # Do nothing
rescue Exception => e
  STDERR.puts "An error occurred: #{e.message}"
  raise if options && options[:debug]
end

